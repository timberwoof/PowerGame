// Power Panel 
// Incremental build-up of Lamp Power Logicl 

integer POWER_CHANNEL = -654647;
integer clock_interval = 1;
integer power_draw = 100;

string REQ = "-REQ";
string ACK = "-ACK";
string PING = "Ping";
string STATUS = "Status";
string CONNECT = "Connect";
string DISCONNECT = "Disconnect";
string POWER = "Power";
string RESET = "Reset";
string NONE = "None";

list power_panel_keys;
list power_panel_names;

key my_power_panel_key;
string my_power_panel_name;

integer dialog_channel;
integer dialog_listen;
integer dialog_countdown;

integer DEBUG = TRUE;
sayDebug(string message) {
    if (DEBUG) {
        llSay(0,message);
    }
}

string CLOSE = "Close";
string mainMenu = "Main";
string menuIdentifier;
key menuAgentKey;
integer menuChannel;
integer menuListen;
integer menuTimeout;

setUpMenu(string identifier, key avatarKey, string message, list buttons)
// wrapper to do all the calls that make a simple menu dialog.
// - adds required buttons such as Close or Main
// - displays the menu command on the alphanumeric display
// - sets up the menu channel, listen, and timer event 
// - calls llDialog
// parameters:
// identifier - sets menuIdentifier, the later context for the command
// avatarKey - uuid of who clicked
// message - text for top of blue menu dialog
// buttons - list of button texts
{
    sayDebug("setUpMenu "+identifier);
    
    if (identifier != mainMenu) {
        buttons = buttons + [mainMenu];
    }
    buttons = buttons + [CLOSE];
    
    menuIdentifier = identifier;
    menuAgentKey = avatarKey; // remember who clicked
    menuChannel = -(llFloor(llFrand(10000)+1000));
    menuListen = llListen(menuChannel, "", avatarKey, "");
    menuTimeout = llFloor(llGetTime()) + 30;
    llDialog(avatarKey, message, buttons, menuChannel);
}

resetMenu() {
    llListenRemove(menuListen);
    menuListen = 0;
    menuChannel = 0;
    menuAgentKey = "";
}

presentMainMenu(key whoClicked) {
    string message = "Lamp Main Menu";
    list buttons = ["Power", STATUS, PING]; 
    if (my_power_panel_key == NULL_KEY) {
        buttons = buttons + [CONNECT];
    } else {
        buttons = buttons + [DISCONNECT];
    }
    buttons = buttons + [RESET];
    setUpMenu(mainMenu, whoClicked, message, buttons);
}

report_status() {
    llSay(0,"Consuming "+(string)power_draw+" watts from power source: "+my_power_panel_name);
}

ping_req() {
    sayDebug ("ping_req");
    power_panel_keys = [];
    power_panel_names = [];
    llSay(POWER_CHANNEL, PING+REQ);
}

ping_ack(string name, key objectKey) {
    sayDebug ("ping_ack");
    power_panel_keys = power_panel_keys + [objectKey];
    power_panel_names = power_panel_names + [name];
}

presentConnectMenu(key whoClicked) {
    string message = "Select Power Distribution Panel to Connect To:";
    integer i;
    list buttons = [];
    for (i = 0; i < llGetListLength(power_panel_names); i = i + 1) {
        message = message + "\n" + (string)i + " " + llList2String(power_panel_names, i);
        sayDebug("presentConenctMenu:"+message);
        buttons = buttons + [(string)i];
    }
    setUpMenu(CONNECT, whoClicked, message, buttons);    
}

default
{
    state_entry()
    {
        sayDebug("state_entry");
        llSetTimerEvent(1);
        llListen(POWER_CHANNEL, "", NULL_KEY, "");
        my_power_panel_key = NULL_KEY;
        my_power_panel_name = NONE;
    }

    touch_start(integer total_number)
    {
        sayDebug("touch_start");
        key whoClicked  = llDetectedKey(0);
        presentMainMenu(whoClicked);
    }
    
    listen(integer channel, string name, key objectKey, string message )
    {
        sayDebug("listen name:"+name+" message:"+message);
        
        if (channel == menuChannel) {
            resetMenu();
            if (message == CLOSE) {
                sayDebug("listen Close");
            } else if (message == STATUS) {
                report_status();
            } else if (message == RESET) {
                llResetScript();
            } else if (message == PING) {
                ping_req();
            } else if (message == CONNECT) {
                presentConnectMenu(objectKey);
            } else if (message == DISCONNECT) {
                sayDebug("listen DISCONNECT from "+name+": "+message);
                llRegionSayTo(llList2Key(power_panel_keys, (integer)message), POWER_CHANNEL, DISCONNECT+REQ);
            } else if (menuIdentifier == CONNECT) {
                sayDebug("listen CONNECT from "+name+": "+message);
                llRegionSayTo(llList2Key(power_panel_keys, (integer)message), POWER_CHANNEL, CONNECT+REQ);
            } else {
                sayDebug("listen did not handle "+message);
            }
        } else if (channel == POWER_CHANNEL) {
            if (message == PING+ACK) {
                ping_ack(name, objectKey);
            } else if (message == CONNECT+ACK) {
                my_power_panel_key = objectKey;
                my_power_panel_name = name;
            } else if (message == DISCONNECT+ACK) {
                my_power_panel_key = NULL_KEY;
                my_power_panel_name = NONE;
            }
        }
    }

    timer() {
        integer now = llFloor(llGetTime());
        if (now > menuTimeout) {
            resetMenu();
        }
    }
}
